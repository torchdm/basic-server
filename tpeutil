#!/bin/env python
import sys
import os
import yaml


def encode(string):
    d = ""
    for chr in string:
        d += str(hex(ord(chr)))
    return d


CONFIG = {
    "TK_NETWIDE": {
        "APPCONF_SANDBOX": {
            "DEV.CPL": {
                "DOMAIN": {
                    "TYPE": -1,
                    "@": encode("com.torch.fail"),
                }
            }
        },
        "USERS": {"defaultuser0": {"MOUNT-PATH": "/ to /users/0"}},
        "GROUPS": {
            "ADMINISTRATOR": ["defaultuser0", "umnd0", "TORCH-AUTHORITY\\SYSTEM"],
            "TRUSTEDINSTALLER": ["defaultuser0", "TORCH-AUTHORITY\\SYSTEM"],
        },
    },
    "TK_SERVER_MACHINE": {
        "SYSTEM": {
            "SETUP": {
                "SystemSetupInProgress": 0x0,
                "CmdLine": "oobe/torchdeploy",
                "OOBEInProgess": 0x0,
            },
            "SYSTEMROOT": {
                "TorchKextPath": "kexts",
            },
        },
        "SOFTWARE": {"com.stupidjane": {}},
    },
}

cmd = sys.argv[1]
if cmd == "-?":
    print("Torch Pre-Install Environment Utility")
    print("Commands: ")
    print("     autoconf : Auto-Creates a Config.YML File")
    print("     apply    : Reads INSTALL.TIM and applies the image")
    print("     reg      : Creates an initial Registry System")
    print("     reg-set  : Sets a registry Key")

elif cmd == "autoconf":
    with open("config.yaml", "w+") as f:
        f.write(
            """
# Generated by Torchs AutoConf

host: 127.0.0.1
port: 5555 


"""
        )

elif cmd == "reg":
    os.mkdir("config")
    os.chdir("config")
    for root_key, data in CONFIG.items():
        with open(root_key, "w+") as f:
            yaml.safe_dump(data, f)
